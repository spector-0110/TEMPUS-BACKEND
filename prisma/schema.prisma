generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum AppointmentStatus {
  booked
  cancelled
  completed
  missed
}

enum SubscriptionPaymentStatus {
  SUCCESS
  PENDING
  FAILED
}

enum NotificationStatus {
  sent
  not_sent
}

enum ScheduleStatus {
  active
  inactive
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum AppointmentPaymentStatus {
  pending
  paid
  unpaid
}

enum DoctorStatus {
  active
  inactive
}

enum AppointmentPaymentMethod{
  cash
  upi
  card
}

model Hospital {
  id                  String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  supabaseUserId      String?                @unique @map("supabase_user_id") @db.Uuid
  name                String
  adminEmail          String                 @unique @map("admin_email")
  subdomain           String                 @unique
  gstin               String?
  address             Json?
  contactInfo         Json?                  @map("contact_info")
  logo                String?
  themeColor          String?                @map("theme_color")
  createdAt           DateTime               @default(now()) @map("created_at")
  establishedDate     String               @map("established_date")
  
  //Relation::
  doctors             Doctor[]
  appointments        Appointment[]
  subscriptions       HospitalSubscription[]
  subscriptionHistory SubscriptionHistory[]
  doctorSchedules     DoctorSchedule[]
  usageStats          UsageStats[]  
  
  @@map("hospitals")
}

model HospitalSubscription {
  id             String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  hospitalId     String             @map("hospital_id") @db.Uuid
  doctorCount    Int                @default(0) @map("doctor_count")
  billingCycle   BillingCycle       @map("billing_cycle")
  startDate      DateTime           @map("start_date")
  endDate        DateTime           @map("end_date")
  totalPrice Decimal                @map("total_price")
  lastNotifiedAt DateTime?          @map("last_notified_at")
  autoRenew      Boolean            @default(false) @map("auto_renew")
  status         SubscriptionStatus @default(PENDING)
  paymentStatus  SubscriptionPaymentStatus  @default(PENDING) @map("payment_status")
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @default(now()) @updatedAt @map("updated_at")

  // Relations
  hospital Hospital              @relation(fields: [hospitalId], references: [id], onDelete: Restrict)
  history  SubscriptionHistory[]

  @@index([hospitalId], name: "idx_hospital_subscriptions_hospital_id")
  @@index([status], name: "idx_hospital_subscriptions_status")
  @@map("hospital_subscriptions")
}

model SubscriptionHistory {
  id             String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  subscriptionId String             @map("subscription_id") @db.Uuid
  hospitalId     String             @map("hospital_id") @db.Uuid
  razorpayOrderId String?           
  doctorCount    Int                @map("doctor_count")
  billingCycle   BillingCycle       @map("billing_cycle")
  totalPrice     Decimal            @map("total_price")
  startDate      DateTime           @map("start_date")
  paymentStatus  SubscriptionPaymentStatus  @default(PENDING) @map("payment_status")
  endDate        DateTime           @map("end_date")
  paymentMethod  String?            @map("payment_method")
  paymentDetails Json?              @map("payment_details")
  createdBy      String?            @map("created_by") @db.Uuid
  createdAt      DateTime           @default(now()) @map("created_at")

  // Relations
  subscription HospitalSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  hospital     Hospital             @relation(fields: [hospitalId], references: [id], onDelete: Restrict)

  @@index([subscriptionId], name: "idx_hospital_subscription_history_subscription_id")
  @@index([hospitalId], name: "idx_hospital_subscription_history_hospital_id")
  @@map("hospital_subscription_history")
}

model Doctor {
  id             String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  hospitalId     String       @map("hospital_id") @db.Uuid
  name           String
  specialization String?
  qualification  String?
  experience     Int?
  age            Int?
  phone          String?
  email          String?
  photo          String?
  aadhar         String?
  status         DoctorStatus @default(active)
  createdAt      DateTime     @default(now()) @map("created_at")

  // Relations
  hospital     Hospital         @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  schedules    DoctorSchedule[]
  appointments Appointment[]
  visitNotes   VisitNote[]

  @@unique([hospitalId, email])
  @@unique([hospitalId, phone])
  @@map("doctors")
}

model DoctorSchedule {
  id                  String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  doctorId            String         @map("doctor_id") @db.Uuid
  hospitalId          String         @map("hospital_id") @db.Uuid
  dayOfWeek           Int            @map("day_of_week")
  avgConsultationTime Int            @map("avg_consultation_time")
  timeRanges          Json           @default("[]") @map("time_ranges")
  status              ScheduleStatus @default(active)
  createdAt           DateTime       @default(now()) @map("created_at")

  // Relations
  doctor   Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  hospital Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)

  @@map("doctor_schedules")
}

model Appointment {
  id                 String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  hospitalId         String             @map("hospital_id") @db.Uuid
  doctorId           String             @map("doctor_id") @db.Uuid
  patientName        String             @map("patient_name")
  mobile             String
  age                Int?
  appointmentDate    DateTime           @map("appointment_date") @db.Date
  startTime          DateTime?          @map("start_time") @db.Time
  endTime            DateTime?          @map("end_time") @db.Time
  status             AppointmentStatus  @default(booked)
  notificationStatus NotificationStatus @default(not_sent) @map("notification_status")
  paymentStatus      AppointmentPaymentStatus    @map("appointment_payment_status")
  paymentMethod      AppointmentPaymentMethod?    @map("appointment_payemnt_method")
  createdAt          DateTime           @default(now()) @map("created_at")

  // Relations
  hospital   Hospital    @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  doctor     Doctor      @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  visitNotes VisitNote[]

  @@map("appointments")
}

model VisitNote {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  appointmentId String   @map("appointment_id") @db.Uuid
  doctorId      String   @map("doctor_id") @db.Uuid
  patientName   String?  @map("patient_name")
  note          String?
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  doctor      Doctor      @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("visit_notes")
}

model UsageStats {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  hospitalId   String   @map("hospital_id") @db.Uuid
  month        DateTime @db.Date
  smsUsed      Int      @default(0) @map("sms_used")
  emailUsed    Int      @default(0) @map("email_used")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  hospital Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)

  @@unique([hospitalId, month])
  @@index([hospitalId], name: "idx_message_quota_hospital_id")
  @@map("message_quotas")
}
