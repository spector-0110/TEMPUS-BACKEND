generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum AppointmentStatus {
  booked
  cancelled
  completed
  missed
}

enum NotificationStatus {
  sent
  not_sent
}

enum ScheduleStatus {
  active
  inactive
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum PaymentStatus {
  pending
  paid
  unpaid
}

model Hospital {
  id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  supabaseUserId String?   @unique @map("supabase_user_id") @db.Uuid
  name           String
  adminEmail     String    @unique @map("admin_email")
  subdomain      String    @unique
  gstin          String?
  address        Json?
  contactInfo    Json?     @map("contact_info")
  logo           String?
  themeColor     String?   @map("theme_color")
  createdAt      DateTime  @default(now()) @map("created_at")
  // Relations
  doctors        Doctor[]
  appointments   Appointment[]
  subscriptions  HospitalSubscription[]
  subscriptionHistory SubscriptionHistory[]
  
  @@map("hospitals")
}

model SubscriptionPlan {
  id           String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String
  description  String?
  monthlyPrice Decimal                  @map("monthly_price")
  yearlyPrice  Decimal                  @map("yearly_price")
  features     Json                     // Includes max_doctors, sms_credits etc.
  isActive     Boolean                  @default(true) @map("is_active")
  createdAt    DateTime                 @default(now()) @map("created_at")
  updatedAt    DateTime                 @default(now()) @updatedAt @map("updated_at")
  deletedAt    DateTime?                @map("deleted_at")

  // Relations
  hospitalSubscriptions HospitalSubscription[]
  subscriptionHistory   SubscriptionHistory[]

  @@map("subscription_plans")
  @@index([isActive], name: "idx_subscription_plans_is_active")
}

model HospitalSubscription {
  id             String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  hospitalId     String             @map("hospital_id") @db.Uuid
  planId         String             @map("plan_id") @db.Uuid
  billingCycle   BillingCycle       @map("billing_cycle")
  startDate      DateTime           @map("start_date")
  endDate        DateTime           @map("end_date")
  planFeatures   Json               @map("plan_features")
  lastNotifiedAt DateTime?          @map("last_notified_at")
  autoRenew      Boolean            @default(true) @map("auto_renew")
  paymentMethod  String?            @map("payment_method")
  paymentDetails Json?              @map("payment_details")
  status         SubscriptionStatus @default(PENDING)
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @default(now()) @updatedAt @map("updated_at")

  // Relations
  hospital       Hospital           @relation(fields: [hospitalId], references: [id], onDelete: Restrict)
  plan           SubscriptionPlan   @relation(fields: [planId], references: [id], onDelete: Restrict)
  history        SubscriptionHistory[]

  @@map("hospital_subscriptions")
  @@index([hospitalId], name: "idx_hospital_subscriptions_hospital_id")
  @@index([status], name: "idx_hospital_subscriptions_status")
}

model SubscriptionHistory {
  id             String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  subscriptionId String             @map("subscription_id") @db.Uuid
  hospitalId     String             @map("hospital_id") @db.Uuid
  planId         String             @map("plan_id") @db.Uuid
  billingCycle   BillingCycle       @map("billing_cycle")
  priceAtTime    Decimal            @map("price_at_time")
  startDate      DateTime           @map("start_date")
  endDate        DateTime           @map("end_date")
  status         SubscriptionStatus
  planFeatures   Json               @map("plan_features")
  paymentMethod  String?            @map("payment_method")
  paymentDetails Json?              @map("payment_details")
  createdBy      String?            @map("created_by") @db.Uuid
  createdAt      DateTime           @default(now()) @map("created_at")

  // Relations
  subscription   HospitalSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  hospital       Hospital             @relation(fields: [hospitalId], references: [id], onDelete: Restrict)
  plan           SubscriptionPlan     @relation(fields: [planId], references: [id], onDelete: Restrict)

  @@map("hospital_subscription_history")
  @@index([subscriptionId], name: "idx_hospital_subscription_history_subscription_id")
  @@index([hospitalId], name: "idx_hospital_subscription_history_hospital_id")
}

model Doctor {
  id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  hospitalId     String    @map("hospital_id") @db.Uuid
  name          String
  specialization String?
  qualification  String?
  experience    Int?
  age          Int?
  phone        String?
  email        String?
  photo        String?
  aadhar       String?
  createdAt    DateTime   @default(now()) @map("created_at")

  // Relations
  hospital     Hospital   @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  schedules    DoctorSchedule[]
  appointments Appointment[]
  visitNotes   VisitNote[]

  @@map("doctors")
}

model DoctorSchedule {
  id                      String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  doctorId               String    @map("doctor_id") @db.Uuid
  hospitalId             String    @map("hospital_id") @db.Uuid
  dayOfWeek             Int       @map("day_of_week")
  startTime             DateTime? @map("start_time") @db.Time
  endTime               DateTime? @map("end_time") @db.Time
  lunchTime             DateTime? @map("lunch_time") @db.Time
  avgConsultationTimeMinutes Int? @map("avg_consultation_time_minutes")
  status                ScheduleStatus @default(active)
  createdAt             DateTime  @default(now()) @map("created_at")

  // Relations
  doctor                Doctor    @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("doctor_schedules")
}

model Appointment {
  id                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  hospitalId       String    @map("hospital_id") @db.Uuid
  doctorId         String    @map("doctor_id") @db.Uuid
  patientName      String    @map("patient_name")
  mobile          String
  age             Int?
  appointmentDate DateTime  @map("appointment_date") @db.Date
  startTime       DateTime? @map("start_time") @db.Time
  endTime         DateTime? @map("end_time") @db.Time
  status          AppointmentStatus @default(booked)
  notificationStatus NotificationStatus @default(not_sent) @map("notification_status")
  paymentStatus    PaymentStatus @default(pending) @map("payment_status")
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  hospital        Hospital  @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  doctor          Doctor    @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  visitNotes      VisitNote[]

  @@map("appointments")
}

model VisitNote {
  id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  appointmentId  String    @map("appointment_id") @db.Uuid
  doctorId       String    @map("doctor_id") @db.Uuid
  patientName    String?   @map("patient_name")
  note          String?
  createdAt     DateTime  @default(now()) @map("created_at")

  // Relations
  appointment    Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  doctor        Doctor      @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("visit_notes")
}