generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum AppointmentStatus {
  booked
  cancelled
  completed
  missed
}

enum NotificationStatus {
  sent
  not_sent
}

enum ScheduleStatus {
  active
  inactive
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum AppointmentPaymentStatus {
  pending
  paid
  unpaid
}

enum DoctorStatus {
  active
  inactive
}

enum AppointmentPaymentMethod{
  cash
  upi
  card
}

enum staff_salary_type {
  monthly
  daily
}

enum staff_role {
  Staff_Nurse
  OPD_Assistant
  Receptionist
  OPD_Manager
  Helper
  Doctor
}

enum staff_attendance_status {
  present
  absent
  paid_leave
  half_day
  week_holiday
}

enum staff_payment_type {
  salary
  advance
  bonus
  loan
}

enum staff_payment_mode {
  cash
  bank_transfer
  upi
  card
  cheque
  net_banking
  other
}


model Hospital {
  id                  String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  supabaseUserId      String?                @unique @map("supabase_user_id") @db.Uuid
  name                String
  adminEmail          String                 @unique @map("admin_email")
  subdomain           String                 @unique
  gstin               String?
  address             Json?
  contactInfo         Json?                  @map("contact_info")
  logo                String?
  themeColor          String?                @map("theme_color")
  createdAt           DateTime               @default(now()) @map("created_at")
  establishedDate     String               @map("established_date")
  
  //Relation::
  doctors             Doctor[]
  appointments        Appointment[]
  doctorSchedules     DoctorSchedule[]
  usageStats          UsageStats[]
  staff               Staff[]  
  
  @@map("hospitals")
}

model Doctor {
  id             String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  hospitalId     String       @map("hospital_id") @db.Uuid
  name           String
  specialization String?
  qualification  String?
  experience     Int?
  age            Int?
  phone          String?
  email          String?
  photo          String?
  aadhar         String?
  status         DoctorStatus @default(active)
  createdAt      DateTime     @default(now()) @map("created_at")

  // Relations
  hospital     Hospital         @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  schedules    DoctorSchedule[]
  appointments Appointment[]
  visitNotes   VisitNote[]

  @@unique([hospitalId, email])
  @@unique([hospitalId, phone])
  @@map("doctors")
}

model DoctorSchedule {
  id                  String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  doctorId            String         @map("doctor_id") @db.Uuid
  hospitalId          String         @map("hospital_id") @db.Uuid
  dayOfWeek           Int            @map("day_of_week")
  avgConsultationTime Int            @map("avg_consultation_time")
  timeRanges          Json           @default("[]") @map("time_ranges")
  status              ScheduleStatus @default(active)
  createdAt           DateTime       @default(now()) @map("created_at")

  // Relations
  doctor   Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  hospital Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)

  @@map("doctor_schedules")
}

model Appointment {
  id                 String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  hospitalId         String             @map("hospital_id") @db.Uuid
  doctorId           String             @map("doctor_id") @db.Uuid
  patientName        String             @map("patient_name")
  mobile             String
  age                Int?
  appointmentDate    DateTime           @map("appointment_date") @db.Date
  startTime          DateTime?          @map("start_time") @db.Timestamptz
  endTime            DateTime?          @map("end_time") @db.Timestamptz
  status             AppointmentStatus  @default(booked)
  notificationStatus NotificationStatus @default(not_sent) @map("notification_status")
  paymentStatus      AppointmentPaymentStatus    @map("appointment_payment_status")
  paymentMethod      AppointmentPaymentMethod?    @map("appointment_payemnt_method")
  createdAt          DateTime           @default(now()) @map("created_at")
  paymentAt          DateTime?            @map("payment_at")
  amount             Int?
  documents          Json?               @default("[]")

  // Relations
  hospital   Hospital    @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  doctor     Doctor      @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  visitNotes VisitNote[]

  @@map("appointments")
}

model VisitNote {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  appointmentId String   @map("appointment_id") @db.Uuid
  doctorId      String   @map("doctor_id") @db.Uuid
  patientName   String?  @map("patient_name")
  note          String?
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  doctor      Doctor      @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("visit_notes")
}

model UsageStats {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  hospitalId   String   @map("hospital_id") @db.Uuid
  month        DateTime @db.Date
  smsUsed      Int      @default(0) @map("sms_used")
  emailUsed    Int      @default(0) @map("email_used")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  hospital Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)

  @@unique([hospitalId, month])
  @@index([hospitalId], name: "idx_message_quota_hospital_id")
  @@map("message_quotas")
}


model Staff {
  id                   String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  hospitalId           String              @map("hospital_id") @db.Uuid
  hospital             Hospital            @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  name                 String
  age                  Int
  mobileNumber         String?             @unique @map("mobile_number")
  aadhaarCard          String?             @map("aadhaar_card")
  photoUrl             String?             @map("photo_url")
  staffRole            staff_role           @map("staff_role")
  salaryType           staff_salary_type     @map("salary_type")
  salaryAmount         Decimal             @db.Decimal(10, 2) @map("salary_amount")
  salaryCreditCycle    Int                 @db.SmallInt @map("salary_credit_cycle")
  isActive             Boolean             @default(true) @map("is_active")
  createdAt            DateTime            @default(now()) @map("created_at") @db.Timestamptz
  updatedAt            DateTime            @default(now()) @map("updated_at") @db.Timestamptz
  attendances          Attendance[]
  payments             StaffPayment[]

  @@index([hospitalId])
  @@map("staff")
}

model Attendance {
  id              String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  staffId         String                 @map("staff_id") @db.Uuid
  staff           Staff                  @relation(fields: [staffId], references: [id], onDelete: Cascade)
  attendanceDate  DateTime               @map("attendance_date") @db.Date
  status          staff_attendance_status  @map("status")
  createdAt       DateTime               @default(now()) @map("created_at") @db.Timestamptz

  @@unique([staffId, attendanceDate])
  @@index([staffId])
  @@index([attendanceDate])
  @@map("attendance")
}

model StaffPayment {
  id            String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  staffId       String              @map("staff_id") @db.Uuid
  staff         Staff               @relation(fields: [staffId], references: [id], onDelete: Cascade)
  amount        Decimal             @db.Decimal(10, 2)
  paymentType   staff_payment_type    @map("payment_type")
  paymentMode   staff_payment_mode    @map("payment_mode")
  paymentDate   DateTime            @default(now()) @map("payment_date") @db.Timestamptz
  remarks       String?
  createdAt     DateTime            @default(now()) @map("created_at") @db.Timestamptz

  @@index([staffId])
  @@index([paymentDate])
  @@map("staff_payments")
}